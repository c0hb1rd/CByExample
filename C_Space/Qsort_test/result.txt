#include <stdio.h>
#include <stdlib.h>

/* macro */
#define NUM 40

/* statement function */
void fillarray(double *, int n);
void showarray(const double *, int n);
int mycomp(const void *, const void *);

int main(void)
{
	/* random array */
	double vals[NUM];
	fillarray(vals, NUM);
	
	/* print random array list */
	puts("Random list: ");
	showarray(vals, NUM);

	/* sort array and print */ 
	puts("Sort list: ");
	qsort(vals, NUM, sizeof(double), mycomp);
	showarray(vals, NUM);

	return 0;
}

void fillarray(double ar[], int n)
{
	int index;

	for (index = 0; index < n; index++) {
		ar[index] = (double)rand() / ((double)rand() + 0.1);
	}
}

void showarray(const double ar[], int n)
{
	int index;

	for (index = 0; index < n; index++) {
		printf("%9.4lf\t", ar[index]);

		if (5 == index % 6)
			puts("");
	}

	if (0 != index % 6)
		puts("");
}

int mycomp(const void * p1, const void * p2)
{
	const double * a1 = (const double *)p1;
	const double * a2 = (const double *)p2;

	if (*a1 < * a2)
		return 1;
	else if (*a1 == *a2)
		return 0;
	else
		return -1;
}
Random list: 
   2.1304	   0.9808	   4.6147	   0.4364	   0.5014	   0.7591	
   0.7105	   1.0393	   0.8863	   0.2333	   0.0671	   0.1706	
   0.3908	   1.1928	   4.5768	   0.6113	   2.0695	   1.2160	
   0.5074	   0.3792	   0.6842	   0.4489	   0.8038	   0.8789	
   0.0735	   6.1123	   0.2898	   2.5516	   3.2049	   7.2541	
   0.2455	   1.0603	   0.4940	   0.4935	   0.7676	  13.5337	
   0.4697	   1.2911	   0.3849	   1.8076	
Sort list: 
  13.5337	   7.2541	   6.1123	   4.6147	   4.5768	   3.2049	
   2.5516	   2.1304	   2.0695	   1.8076	   1.2911	   1.2160	
   1.1928	   1.0603	   1.0393	   0.9808	   0.8863	   0.8789	
   0.8038	   0.7676	   0.7591	   0.7105	   0.6842	   0.6113	
   0.5074	   0.5014	   0.4940	   0.4935	   0.4697	   0.4489	
   0.4364	   0.3908	   0.3849	   0.3792	   0.2898	   0.2455	
   0.2333	   0.1706	   0.0735	   0.0671	
#include <stdio.h>
#include <stdlib.h>

/* macro */
#define NUM 40
#define THE_WAY 1
#define ANTHOR_WAY 0

/* statement function */
void fillarray(double *, int n);
void showarray(const double *, int n);
int mycomp(const void *, const void *);

int main(void)
{
	/* random array */
	double vals[NUM];
	fillarray(vals, NUM);
	
	/* print random array list */
	puts("Random list: ");
	showarray(vals, NUM);

	/* sort array and print */ 
	puts("Sort list: ");
	qsort(vals, NUM, sizeof(double), mycomp);
	showarray(vals, NUM);

	return 0;
}

void fillarray(double ar[], int n)
{
	int index;

	for (index = 0; index < n; index++) {
		ar[index] = (double)rand() / ((double)rand() + 0.1);
	}
}

void showarray(const double ar[], int n)
{
	int index;

	for (index = 0; index < n; index++) {
		printf("%9.4lf\t", ar[index]);

		if (5 == index % 6)
			puts("");
	}

	if (0 != index % 6)
		puts("");
}

int mycomp(const void * p1, const void * p2)
{
	const double * a1 = (const double *)p1;
	const double * a2 = (const double *)p2;

#if THE_WAY
	if (*a1 < * a2)
		return 1;	
	else if (*a1 == *a2)
		return 0;
	else
		return -1;
#endif

#if ANTHOR_WAY
	if (*a1 > *a2)
		return -1;
	else if (*a1 == *a2)
		return 0;
	else
		return 1;
#endif
}
Random list: 
   2.1304	   0.9808	   4.6147	   0.4364	   0.5014	   0.7591	
   0.7105	   1.0393	   0.8863	   0.2333	   0.0671	   0.1706	
   0.3908	   1.1928	   4.5768	   0.6113	   2.0695	   1.2160	
   0.5074	   0.3792	   0.6842	   0.4489	   0.8038	   0.8789	
   0.0735	   6.1123	   0.2898	   2.5516	   3.2049	   7.2541	
   0.2455	   1.0603	   0.4940	   0.4935	   0.7676	  13.5337	
   0.4697	   1.2911	   0.3849	   1.8076	
Sort list: 
  13.5337	   7.2541	   6.1123	   4.6147	   4.5768	   3.2049	
   2.5516	   2.1304	   2.0695	   1.8076	   1.2911	   1.2160	
   1.1928	   1.0603	   1.0393	   0.9808	   0.8863	   0.8789	
   0.8038	   0.7676	   0.7591	   0.7105	   0.6842	   0.6113	
   0.5074	   0.5014	   0.4940	   0.4935	   0.4697	   0.4489	
   0.4364	   0.3908	   0.3849	   0.3792	   0.2898	   0.2455	
   0.2333	   0.1706	   0.0735	   0.0671	
#include <stdio.h>
#include <stdlib.h>

/* macro */
#define NUM 40
#define THE_WAY 1
#define ANTHOR_WAY 0

/* statement function */
void fillarray(double *, int n);
void showarray(const double *, int n);
int mycomp(const void *, const void *);

int main(void)
{
	/* random array */
	double vals[NUM];
	fillarray(vals, NUM);
	
	/* print random array list */
	puts("Random list: ");
	showarray(vals, NUM);

	/* sort array and print */ 
	puts("Sort list: ");
	qsort(vals, NUM, sizeof(double), mycomp);
	showarray(vals, NUM);

	return 0;
}

void fillarray(double ar[], int n)
{
	int index;

	for (index = 0; index < n; index++) {
		ar[index] = (double)rand() / ((double)rand() + 0.1);
	}
}

void showarray(const double ar[], int n)
{
	int index;

	for (index = 0; index < n; index++) {
		printf("%9.4lf\t", ar[index]);

		if (5 == index % 6)
			puts("");
	}

	if (0 != index % 6)
		puts("");
}

int mycomp(const void * p1, const void * p2)
{
	const double * a1 = (const double *)p1;
	const double * a2 = (const double *)p2;

#if THE_WAY
	if (*a1 < *a2)
		return 1;	
	else if (*a1 == *a2)
		return 0;
	else
		return -1;
#endif

#if ANTHOR_WAY
	if (*a1 > *a2)
		return -1;
	else if (*a1 == *a2)
		return 0;
	else
		return 1;
#endif
}
Random list: 
   2.1304	   0.9808	   4.6147	   0.4364	   0.5014	   0.7591	
   0.7105	   1.0393	   0.8863	   0.2333	   0.0671	   0.1706	
   0.3908	   1.1928	   4.5768	   0.6113	   2.0695	   1.2160	
   0.5074	   0.3792	   0.6842	   0.4489	   0.8038	   0.8789	
   0.0735	   6.1123	   0.2898	   2.5516	   3.2049	   7.2541	
   0.2455	   1.0603	   0.4940	   0.4935	   0.7676	  13.5337	
   0.4697	   1.2911	   0.3849	   1.8076	
Sort list: 
  13.5337	   7.2541	   6.1123	   4.6147	   4.5768	   3.2049	
   2.5516	   2.1304	   2.0695	   1.8076	   1.2911	   1.2160	
   1.1928	   1.0603	   1.0393	   0.9808	   0.8863	   0.8789	
   0.8038	   0.7676	   0.7591	   0.7105	   0.6842	   0.6113	
   0.5074	   0.5014	   0.4940	   0.4935	   0.4697	   0.4489	
   0.4364	   0.3908	   0.3849	   0.3792	   0.2898	   0.2455	
   0.2333	   0.1706	   0.0735	   0.0671	
